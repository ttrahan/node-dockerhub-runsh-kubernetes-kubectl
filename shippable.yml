# Language setting http://docs.shippable.com/ci/languages/node/
language: node_js

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    - master

# using pre-defined build variables
# full list http://docs.shippable.com/ci/advancedOptions/environmentVariables/
env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/tests
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - DOCKER_REPO=node-build-push-docker-hub-runsh-kubernetes-kubectl
    - DOCKER_ACC=ttrahan # {account name}

build:
  ci:
    # npm mirrors can sometimes be flaky, better to use shippable_retry
    # http://docs.shippable.com/ci/advancedOptions/retry/
    - shippable_retry npm install
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" $SHIPPABLE_REPO_DIR/node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR
    - popd

  post_ci:
    - docker build -t $DOCKER_ACC/$DOCKER_REPO:$BRANCH.$BUILD_NUMBER .
    - docker push $DOCKER_ACC/$DOCKER_REPO:$BRANCH.$BUILD_NUMBER

# Integrations are used to connect external resources to CI
# http://docs.shippable.com/integrations/overview/
integrations:
# adding docker hub integration so that credentials are available to CI Job
# http://docs.shippable.com/platform/integration/dockerRegistryLogin/
  hub:
    - integrationName: ttrahan-dh # replace with your Docker Hub integration name
      type: dockerRegistryLogin

  # http://docs.shippable.com/ci/shippableyml/#notifications
  notifications:
    # turns off email for PR builds, notifies only on failure or change in status
    # http://docs.shippable.com/integrations/notifications/email/
    - integrationName: email
      type: email
      on_success: change
      on_failure: always
      on_pull_request: never

    # Sending webhook to notify Shippable pipeline of new image tag available
    # http://docs.shippable.com/tutorials/pipelines/connectingCiPipelines/
    # UNCOMMENT LINES BELOW THIS AFTER ADDING PIPELINE TO SPOG VIEW
    - integrationName: trigger-shipdemo-img
      type: webhook
      payload:
        - versionName=$BRANCH.$BUILD_NUMBER
      branches:
        only:
          - master
      on_success: always
      on_failure: never
      on_start: never


resources:

  # resources for sample application running on Kubernetes on AWS

################################

# Integration to that stores Kubernetes credentials
  - name: shipdemo-int-kube
    type: integration
    integration: ttrahan-kube #replace with your Kubernetes integration name
    flags:
      - runSh-kubernetes-kubectl

################################
# Sample Node Aye-Aye component

# GitHub repo holding scripts to be used in runsh pipeline job
  - name: shipdemo-repo
    type: gitRepo
    integration: ttrahan-gh # replace with your GitHub integration name
    pointer:
      sourceName: ttrahan/node-build-push-docker-hub-runsh-kubernetes-kubectl # replace with source code location (e.g. GitHub) where you cloned this sample project
      branch: master
    flags:
      - runSh-kubernetes-kubectl

# Docker Image
  - name: shipdemo-img
    type: image
    integration: ttrahan-dh # replace with your Registry/Hub integration name
    pointer:
      sourceName: ttrahan/node-build-push-docker-hub-runsh-kubernetes-kubectl # replace with docker registry location where you push the images
    seed:
      versionName: master.1
    flags:
      - runSh-kubernetes-kubectl

################################
# TEST environment

# env vars - Test environment
  - name: shipdemo-params-test
    type: params
    version:
      params:
        CLUSTER: "useast1.dev.example-kube-cluster.com" # replace with your cluster domain name
        ENVIRONMENT: "TEST"
        PORT: 80
        MEMORY: 64
        CPUSHARES: .25
        REPLICAS: 1
    flags:
      - runSh-kubernetes-kubectl

################################
# PROD environment

# env vars - Prod environment
  - name: shipdemo-params-prod
    type: params
    version:
      params:
        CLUSTER: "useast1.dev.example-kube-cluster.com" # replace with your cluster domain name
        ENVIRONMENT: "PROD"
        PORT: 80
        MEMORY: 128
        CPUSHARES: .5
        REPLICAS: 2
    flags:
      - runSh-kubernetes-kubectl


jobs:

# jobs for the sample node app pipeline from CI thru TEST environment

################################

# add pipeline job
# TEST deployment to Kube cluster on AWS
  - name: shipdemo-kubectl-deploy-test
    type: runSh
    steps:
      - IN: shipdemo-repo
        switch: off
      - IN: shipdemo-int-kube
      - IN: shipdemo-img
      - IN: shipdemo-params-test
      - TASK:
        - script: . $SHIPDEMOREPO_PATH/gitRepo/pipeline/prepEnvironment.sh
        - script: . $SHIPDEMOREPO_PATH/gitRepo/pipeline/deploy.sh
  - flags:
    - runSh-kubernetes-kubectl

# add pipeline job
# PROD deployment to Kube cluster on AWS
  - name: shipdemo-kubectl-deploy-prod
    type: runSh
    steps:
      - IN: shipdemo-kubectl-deploy-test
        switch: off
      - IN: shipdemo-repo
        switch: off
      - IN: shipdemo-int-kube
      - IN: shipdemo-params-prod
      - TASK:
        - script: . $SHIPDEMOREPO_PATH/gitRepo/pipeline/prepEnvironment.sh
        - script: . $SHIPDEMOREPO_PATH/gitRepo/pipeline/deploy.sh
  - flags:
    - runSh-kubernetes-kubectl
